{"version":3,"sources":["Images/hazel.jpg","Images/tubby.jpg","Images/whiskey.jpg","NavBar.js","DogList.js","DogDetails.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","dogLinks","this","props","dogs","map","dog","className","key","name","exact","to","type","data-toggle","data-target","aria-controls","aria-expanded","araia-aria-label","id","Component","DogList","d","src","alt","DogDetails","age","facts","a","i","Routes","path","render","match","params","currentDog","find","toLowerCase","App","defaultProps","whiskey","hazel","tubby","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.833e04c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hazel.4eb85e80.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tubby.2f47cb65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/whiskey.5c1e3b17.jpg\";","import React, { Component } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    const dogLinks = this.props.dogs.map((dog) => (\r\n      <li className=\"nav-item\" key={dog.name}>\r\n        <NavLink exact to={`/dogs/${dog.name}`} className=\"nav-link\">\r\n          {dog.name}\r\n        </NavLink>\r\n      </li>\r\n    ));\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <Link className=\"navbar-brand\" to=\"/dogs\">\r\n          Dog App\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          araia-aria-label=\"Toggle navigator\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <NavLink exact to=\"/dogs\" className=\"nav-link\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            {dogLinks}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./DogList.css\";\r\nimport { Link } from \"react-router-dom\";\r\nclass DogList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DogList\">\r\n        <h1 className=\"display-1 text-center my-4\">Dog List</h1>\r\n        <div className=\"row\">\r\n          {this.props.dogs.map((d) => (\r\n            <div className=\"Dog col-lg-4 text-center\" key={d.name}>\r\n              <img src={d.src} alt={d.name}></img>\r\n              <Link className=\"underline\" to={`./${d.name}`}>\r\n                <h3>{d.name}</h3>\r\n              </Link>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogList;\r\n","import React, { Component } from \"react\";\r\nimport \"./DogDetails.css\";\r\nimport { Link } from \"react-router-dom\";\r\nclass DogDetails extends Component {\r\n  render() {\r\n    let { dog } = this.props;\r\n    return (\r\n      <div className=\"DogDetails row justify-content-center mt-5\">\r\n        <div className=\"col-11 col-lg-5\">\r\n          <div className=\"DogDetails-card card\">\r\n            <img className=\"card-img-top\" src={dog.src} alt={dog.name}></img>\r\n            <div className=\"card-body\">\r\n              <h2 className=\"card-title\">{dog.name}</h2>\r\n              <h4 className=\"card-subtitle text-muted\">{dog.age} years old</h4>\r\n            </div>\r\n            <ul className=\"list-group list-group-flush\">\r\n              {dog.facts.map((a, i) => (\r\n                <li key={i} className=\"list-group-item\">\r\n                  {a}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"card-body\">\r\n              <Link className=\"btn btn-info\" to=\"/dogs\">\r\n                Go Back\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogDetails;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport DogList from \"./DogList\";\r\nimport DogDetails from \"./DogDetails\";\r\n\r\nclass Routes extends Component {\r\n  render() {\r\n    const getDog = (props) => {\r\n      let name = props.match.params.name;\r\n      let currentDog = this.props.dogs.find(\r\n        (dog) => dog.name.toLowerCase() === name.toLowerCase()\r\n      );\r\n      return <DogDetails {...props} dog={currentDog} />;\r\n    };\r\n    return (\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/dogs\"\r\n          render={() => <DogList dogs={this.props.dogs} />}\r\n        />\r\n        <Route exact path=\"/dogs/:name\" render={getDog} />\r\n        <Redirect to=\"/dogs/\" />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n//import { Route, Switch } from \"react-router-dom\";\nimport hazel from \"./Images/hazel.jpg\";\nimport tubby from \"./Images/tubby.jpg\";\nimport whiskey from \"./Images/whiskey.jpg\";\nimport NavBar from \"./NavBar\";\nimport Routes from \"./Routes\";\nclass App extends Component {\n  static defaultProps = {\n    dogs: [\n      {\n        name: \"Whiskey\",\n        age: 5,\n        src: whiskey,\n        facts: [\n          \"Whiskey loves eating popcorn.\",\n          \"Whiskey is a terrible guard dog.\",\n          \"Whiskey wants to cuddle with you!\",\n        ],\n      },\n      {\n        name: \"Hazel\",\n        age: 3,\n        src: hazel,\n        facts: [\n          \"Hazel has soooo much energy!\",\n          \"Hazel is highly intelligent.\",\n          \"Hazel loves people more than dogs.\",\n        ],\n      },\n      {\n        name: \"Tubby\",\n        age: 4,\n        src: tubby,\n        facts: [\n          \"Tubby is not the brightest dog\",\n          \"Tubby does not like walks or exercise.\",\n          \"Tubby loves eating food.\",\n        ],\n      },\n    ],\n  };\n  render() {\n    return (\n      <div>\n        <NavBar dogs={this.props.dogs} />\n\n        <div className=\"container\">\n          <Routes dogs={this.props.dogs} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}